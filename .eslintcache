[{"/home/ramos/Proyectos/google-maps-api/src/App.js":"1","/home/ramos/Proyectos/google-maps-api/src/index.js":"2","/home/ramos/Proyectos/google-maps-api/src/env.js":"3"},{"size":5044,"mtime":1610315900383,"results":"4","hashOfConfig":"5"},{"size":250,"mtime":1610315427245,"results":"6","hashOfConfig":"5"},{"size":55,"mtime":1610316010203,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"ir1tdu",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ramos/Proyectos/google-maps-api/src/App.js",["15"],"import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Input, Button, Divider, Layout, Badge, List, notification } from \"antd\";\nimport GoogleMapReact from \"google-map-react\";\n\nconst { Header, Sider, Content } = Layout;\n\nconst Container = styled(Layout)({\n  minHeight: \"100vh\",\n});\n\nconst Left = styled(Sider)({\n  backgroundColor: \"#f1f1f1\",\n  padding: 5,\n  paddingTop: 64,\n});\n\nconst AppHeader = styled(Header)({\n  backgroundColor: \"#f1f1f1\",\n  textAlign: \"center\",\n  fontWeight: \"bold\",\n});\n\nconst ListTitle = styled.p({\n  fontWeight: \"bold\",\n  textTransform: \"capitalize\",\n  margin: 0,\n});\n\nconst ListDescription = styled.p({\n  fontWeight: \"100\",\n  fontsize: \"10\",\n  margin: 0,\n});\n\nconst AnyReactComponent = ({ position }) => <Badge count={position} />;\n\nfunction App() {\n  // Google Map and Maps objects\n  const [map, setMap] = useState();\n  const [maps, setMaps] = useState();\n\n  const [loading, setLoading] = useState(true);\n  const [marks, setMarks] = useState([]);\n  const [currentMark, setCurrentMark] = useState();\n  const [text, setText] = useState(\"\");\n\n  const openNotificationWithIcon = (type, text) => {\n    notification[type]({\n      message: type === 'error' ? 'Error!' : 'Success!',\n      description: text,\n    });\n  };\n\n  const defaultProps = {\n    center: {\n      lat: 59.95,\n      lng: 30.33,\n    },\n    zoom: 11,\n  };\n\n  const clear = () => {\n    setText(\"\");\n    setCurrentMark(undefined);\n  };\n\n  const markPosition = () => {\n    //adding the text, Ex : Caracas, Venezuela\n    currentMark.text = text;\n    const aux = [...marks, currentMark];\n    map.setCenter(currentMark.position);\n    setMarks(aux);\n    openNotificationWithIcon('success','Mark added succesfully')\n    clear();\n  };\n\n  const TextToCoord = () => {\n    new maps.Geocoder().geocode({ address: text }, (results, status) => {\n      if (status === \"OK\") {\n        // on Succes create a new marker and sets it has the current one\n        const marker = new maps.Marker({\n          map: map,\n          position: results[0].geometry.location,\n        });\n        setCurrentMark(marker);\n        openNotificationWithIcon('success','Coordinates Calculated succesfully')\n      } else {\n        openNotificationWithIcon('error',`Geocode was not successful for the following reason: ${status}`)\n      }\n    });\n  };\n  return (\n    <Container>\n      <Left>\n        <Input\n          value={text}\n          placeholder=\"Direction\"\n          onChange={(evt) => setText(evt.target.value)}\n        />\n        <Divider orientation=\"left\" />\n        <Button type=\"primary\" onClick={TextToCoord} disabled={loading}>\n          Calc\n        </Button>\n        <Divider orientation=\"left\" plain>\n          Results\n        </Divider>\n        <Input\n          placeholder=\"Lat\"\n          readOnly\n          value={currentMark?.position.lat() ?? \"\"}\n        />\n        <Divider orientation=\"left\" plain />\n        <Input\n          placeholder=\"Ing\"\n          readOnly\n          value={currentMark?.position.lng() ?? \"\"}\n        />\n        <Divider orientation=\"left\" plain />\n        <Button type=\"primary\" disabled={loading || !currentMark} onClick={markPosition}>\n          Mark\n        </Button>\n        <Divider orientation=\"left\" plain>\n          Marks\n        </Divider>\n        <List\n          itemLayout=\"horizontal\"\n          dataSource={marks}\n          renderItem={(mark) => (\n            <>\n              <List.Item>\n                <List.Item.Meta\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => map.setCenter(mark.position)}\n                  title={<ListTitle> {mark.text} </ListTitle>}\n                  description={\n                    <>\n                      <ListDescription>\n                        {`Lat: ${mark.position.lat()}`}\n                      </ListDescription>\n                      <ListDescription>\n                        {`Lng: ${mark.position.lng()}`}\n                      </ListDescription>\n                    </>\n                  }\n                />\n              </List.Item>\n              <Divider />\n            </>\n          )}\n        />\n      </Left>\n      <Layout>\n        <AppHeader>Google Map Api Test</AppHeader>\n        <Content>\n          <GoogleMapReact\n            bootstrapURLKeys={{\n              key: /** YOUR API KEY GOES HERE */\n            }}\n            defaultCenter={defaultProps.center}\n            defaultZoom={defaultProps.zoom}\n            onGoogleApiLoaded={({ map, maps }) => {\n              // Capture map and Maps so you can use it later\n              setMap(map);\n              setMaps(maps);\n              setLoading(false);\n            }}\n            yesIWantToUseGoogleMapApiInternals\n          >\n            {marks.map((mark, index) => (\n              <AnyReactComponent\n                lat={mark.position.lat()}\n                lng={mark.position.lng()}\n                position={index + 1}\n              />\n            ))}\n          </GoogleMapReact>\n        </Content>\n      </Layout>\n    </Container>\n  );\n}\n\nexport default App;\n","/home/ramos/Proyectos/google-maps-api/src/index.js",[],"/home/ramos/Proyectos/google-maps-api/src/env.js",[],{"ruleId":null,"fatal":true,"severity":2,"message":"16","line":159,"column":13},"Parsing error: Unexpected token\n\n  157 |             bootstrapURLKeys={{\n  158 |               key: /** YOUR API KEY GOES HERE */\n> 159 |             }}\n      |             ^\n  160 |             defaultCenter={defaultProps.center}\n  161 |             defaultZoom={defaultProps.zoom}\n  162 |             onGoogleApiLoaded={({ map, maps }) => {"]